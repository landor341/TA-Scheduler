from django.test import TestCase
from .models import User, Course, CourseSection, Semester
from .forms import CreateUserForm, CreateCourseForm, CreateClassForm

#begin with user form tests
class UserTests(TestCase):
    def test_create_user_form_valid(self):
        form_data = {
            'username': 'jdoe',
            'email': 'jdoe@example.com',
            'role': 'TA',
            'password': 'securepassword',
        }
        form = CreateUserForm(data=form_data)
        self.assertTrue(form.is_valid())
        user = form.save()
        self.assertEqual(user.username, 'jdoe')
        self.assertEqual(user.email, 'jdoe@example.com')
        self.assertEqual(user.role, 'TA')

    def test_create_user_form_invalid(self):
        form_data = {
            'username': '',  # Missing username
            'email': 'invalidemail',  # Invalid email format
            'role': 'Instructor',
            'password': 'short',
        }
        form = CreateUserForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn('username', form.errors)
        self.assertIn('email', form.errors)
        self.assertIn('password', form.errors)


class CourseTests(TestCase):
    def setUp(self):
        # Shared setup for course and section tests
        self.semester = Semester.objects.create(
            semester_name="Fall 2024",
            start_date="2024-09-01",
            end_date="2024-12-15"
        )
        self.course = Course.objects.create(
            course_name="Software Engineering",
            course_code="CS361",
            semester=self.semester
        )
        self.instructor = User.objects.create(
            username="jdoe",
            role="Instructor",
            email="jdoe@example.com"
        )

    def test_create_course_form_valid(self):
        form_data = {
            'course_name': 'Introduction to CS',
            'course_code': 'CS101',
            'semester': self.semester.id
        }
        form = CreateCourseForm(data=form_data)
        self.assertTrue(form.is_valid())
        course = form.save()
        self.assertEqual(course.course_name, 'Introduction to CS')
        self.assertEqual(course.course_code, 'CS101')
        self.assertEqual(course.semester, self.semester)

    def test_create_course_form_invalid(self):
        form_data = {
            'course_name': 'Introduction to CS',
            'course_code': '',  # Missing course code
            'semester': self.semester.id
        }
        form = CreateCourseForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn('course_code', form.errors)

    def test_create_class_form_valid(self):
        form_data = {
            'course': self.course.id,
            'course_section_number': 101,
            'instructor': self.instructor.id,
            'days': 'Mon, Wed',
            'start_time': '10:00',
            'end_time': '11:30'
        }
        form = CreateClassForm(data=form_data)
        self.assertTrue(form.is_valid())
        section = form.save()
        self.assertEqual(section.course, self.course)
        self.assertEqual(section.course_section_number, 101)
        self.assertEqual(section.instructor, self.instructor)

    def test_create_class_form_invalid(self):
        form_data = {
            'course': self.course.id,
            'course_section_number': '',  # Missing section number
            'instructor': self.instructor.id,
            'days': 'Mon, Wed',
            'start_time': '10:00',
            'end_time': '11:30'
        }
        form = CreateClassForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn('course_section_number', form.errors)
